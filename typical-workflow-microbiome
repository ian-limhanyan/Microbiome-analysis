## A typical workflow for microbiome analyses.

# Considering you have a phyloseq object ready, we can do some exploratory microbiome analyses.
# In this example, our aim is to compare the gut profile of individuals before vs after consuming probiotics.
# The workflow is as follows:
# 1) Alpha diversity
# 2) Beta diversity 
# 3) Relative abundance 
# 4) Differential abundance analysis

# Load main R packages for microbiome analysis
library(ggplot2)    # For graphical visualizations.
library(ggsignif)   # For adding significance annotations to ggplot2 plots
library(Maaslin2)   # For studying multivariable associations.
library(microbiome) # For extending phyloseq & provides tools for manipulation, analysis, visualization etc.
library(phyloseq)   # For importing, storing, manipulating, visualizing, and analyzing high-throughput microbiome census data.
library(vegan)      # For community ecology analysis consisting methods such as ordination, diversity, clustering, etc.

### 1) Alpha diversity ###
# First, round the values in the OTU table to integers
otu_table(ps_total_counts) <- round(otu_table(ps_total_counts))

# Generate α-diversity metrics. Typically Shannon is used, but we'll try plotting 3 different α-diversity metrics today.
alpha.div = estimate_richness(ps, measures = c('Shannon', 'Simpson', 'Observed')) # our phyloseq object is named 'ps'
alpha.div <- merge(alpha.div, met, by = 'row.names') # merge alpha diversity score table with metadata table

# Optional: Define custom x-axis labels for the subjects & their respective Timepoints (10 data labels in total)
custom_labels <- c("S1_T1" = "S1\nT1", "S1_T2" = "S1\nT2", 
                   "S2_T1" = "S2\nT1", "S2_T2" = "S2\nT2", 
                   "S3_T1" = "S3\nT1", "S3_T2" = "S3\nT2", 
                   "S4_T1" = "S4\nT1", "S4_T2" = "S4\nT2", 
                   "S5_T1" = "S5\nT1", "S5_T2" = "S5\nT2")

# Create a theme without gridlines (for aesthetic purposes)
no_grid_theme <- theme(panel.grid.major = element_blank(), 
                       panel.grid.minor = element_blank())

# Function to create plots
create_alphaplot <- function(metric) {
  plot <- alpha.div %>%
    ggplot(aes(x = Subject_Timepoint, y = get(metric), color = Subject_Timepoint)) + 
    geom_boxplot() +
    scale_color_manual(values = color_mapping, guide = FALSE) +
    ggtitle(metric) +
    theme_bw() +
    xlab("Subject_Timepoint") +
    ylab(metric) +
    scale_x_discrete(labels = custom_labels) +  # Set custom x-axis labels
    no_grid_theme
  return(plot)
}

# Create plots for the 3 α-diversity metrics
Shannon.plot <- create_alphaplot('Shannon')
Simpson.plot <- create_alphaplot('Simpson')
Observed.plot <- create_alphaplot('Observed')

# Arrange all 3 plots in one image
alpha.plot <- grid.arrange(Shannon.plot, Simpson.plot, Observed.plot, ncol = 1)

## Out of curiosity, we can do 3 other tests to compare alpha diversity against demographic variables.
# a. Let's try plotting Shannon against demographic variables (even though the sample size is small for any statistical significance)
# For example, Ethnicity, BMI, Gender
## BMI and Shannon
alpha.div %>%
  filter(!is.na(BMI)) %>%
  ggplot(aes(x = BMI, y = Shannon)) + geom_boxplot()

# b. Let's test the "significance" of difference of different demographic variables with Shannon diversity
kruskal.test(Shannon ~ BMI, data = alpha.div)
kruskal.test(Shannon ~ Gender, data = alpha.div)
kruskal.test(Shannon ~ Current_Diets, data = alpha.div)

# c. Lastly, let's see amongst the 5 subjects, if there is any relationship between demographic variables and Shannon diversity
alpha.div %>%
  filter(!is.na(BMI)) %>%
  ggplot(aes(x=Shannon, y=BMI)) + geom_point()

linear_model <-lm(Shannon ~ BMI, alpha.div)
summary(linear_model)

### 2) Beta diversity ###
## Next let's explore beta diversity, comparing between before vs after consuming probiotics (Timepoint 1 and Timepoint 2)

# But first, let's filter our phyloseq object 'ps'. One method is to filter using a threshold based on the max read count
# To remove low ASV counts, first check total read counts of each ASV
head(taxa_sums(ps)) # snippet of the first few ASVs
summary(taxa_sums(ps)) # report summary stats
ps # show how many taxa before filtering

# Filter using threshold based on max count (such as 0.001%)
threshold = max(taxa_sums(ps))*(0.001/100) # identify taxa which counts are higher or lower than 0.001% of the max count
ps.filt = prune_taxa(taxa_sums(ps) > threshold, ps) # keep taxa with counts higher than 0.001% of the max count
ps.filt # show how many taxa after filtering

# Now, we can use the filtered phyloseq 'ps.filt' for exploring beta diversity
# a. Aitchison - clr transformation
ps.clr <- microbiome::transform(ps.filt, 'clr')
euc_dist = phyloseq::distance(otu_table(ps.clr), method="euclidean")
ord_euc = ordinate(ps.clr, method = 'PCoA', distance=euc_dist)

# b. Bray curtis 
bray_dist = phyloseq::distance(otu_table(ps.filt), method="bray")
ord_bray = ordinate(ps.filt, method = 'PCoA', distance=bray_dist)

# c. Jaccard 
jac_dist = phyloseq::distance(otu_table(ps.filt), method="jaccard")
ord_jac = ordinate(ps.filt, method = 'PCoA', distance=jac_dist)

# Define the color mapping for the probiotic type 'Probiotics_Formulation'
probiotic_color_mapping <- c(
  "Formulation Red" = "red",
  "Formulation Green" = "green",
  "Formulation Blue" = "blue",
  "Formulation Orange" = "orange"
)

# Function to create a PCoA plot based on the specified distance
create_pcoa_plot <- function(data, ordination, color_var, title, hide_legend) {
  p <- plot_ordination(data, ordination, color = color_var, shape = "Timepoint") +
    theme(aspect.ratio = 1) +
    ggtitle(title) +
    theme(
      plot.title = element_text(size = 14),
      panel.border = element_blank(),
      axis.line = element_blank(),
      axis.ticks = element_blank(),
      axis.title = element_blank()
    ) +
    geom_point(
      size = 5,
      aes(color = Probiotics_Formulation, shape = Timepoint, size = 2, stroke = 1)
    ) +
    geom_line(aes(group = Subject),color="grey") +
    scale_color_manual(values = probiotic_color_mapping) +
    scale_shape_manual(
      values = c("Pre-probiotics" = 17, "Post-probiotics" = 19),
      breaks = c("Pre-probiotics", "Post-probiotics")
    ) +
    theme_bw() +
    no_grid_theme +
    geom_text_repel(aes(label = Subject_Timepoint), size = 3) +
    labs(
      color = 'Probiotics_Formulation',
      shape = 'Timepoint'
    )
  
  # Hide the legend if specified
  if (hide_legend) {
    p <- p + theme(legend.position = "none")
  }
  
  return(p)
}

# Create PCoA plots for Euclidean, Bray-Curtis, and Jaccard distances
aitchison.plot <- create_pcoa_plot(ps.clr, ord_euc, "Subject_Timepoint", "PCoA plot based on Aitchison distance", TRUE)
bray.plot <- create_pcoa_plot(ps.filt, ord_bray, "Subject_Timepoint", "PCoA plot based on Bray-Curtis", TRUE)  # Hide legend
jac.plot <- create_pcoa_plot(ps.filt, ord_jac, "Subject_Timepoint", "PCoA plot based on Jaccard", TRUE)

# Arrange the plots in a grid
beta.plot <- grid.arrange(aitchison.plot, bray.plot, jac.plot, ncol = 1)
aitchison.plot
bray.plot
jac.plot


### 3) Relative abundance of bacterial taxa ###

## a. Let's start with observing changes after consuming probiotics in the genera level
# Assuming you have the required data prepared in a data frame called 'ps_melt'
# The 'ps_melt' should contain the following column data: Genus_Species (Species name), Subject (Subject ID), Abundance (raw/relative abundance), Timepoint (T1, T2)

# Melt ps_filt object to produce bar graphs easily
ps_filt_melt <- psmelt(ps.filt)

# Create a stacked bar plot for all 5 subjects with "Pre-probiotics" graph above "Post-probiotics"
stacked_plot <- ggplot(ps_melt, aes(x = Genus, y = Abundance, fill = Subject)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  facet_wrap(~Timepoint, scales = "free_x", ncol = 1) +
  labs(x = "", y = "Abundance", fill = "Subject") +
  scale_fill_manual(values = c("S1" = "pink", "S2" = "purple", "S3" = "orange", "S4" = "blue", "S5" = "green")) +
  ggtitle("Stacked Abundance of Genera by Subject (T1 & T2)") +
  theme_minimal()

# Print the stacked genera plot
print(stacked_plot)


## b. Calculate the Firmicutes/Bacteroidota ratio in each subject for both Pre-probiotics and Post-probiotics (for each subject)
# Initialize an empty data frame to store the results
result_table <- data.frame(
    Subject = unique(sample_data(ps)$Subject),
    Pre_Firmicutes = 0,
    Pre_Bacteroidota = 0,
    Post_Firmicutes = 0,
    Post_Bacteroidota = 0
)

subjects <- unique(sample_data(ps)$Subject)

for (i in 1:length(subjects)) {
    subject <- subjects[i]
    
    pre_data <- subset_samples(ps, Subject == subject & Timepoint == "Pre-probiotics")
    post_data <- subset_samples(ps, Subject == subject & Timepoint == "Post-probiotics")
    
    otu_table <- otu_table(ps)
    tax_table <- tax_table(ps)
    
    firmicutes_taxa <- which(tax_table[, "Phylum"] == "Firmicutes")
    bacteroidota_taxa <- which(tax_table[, "Phylum"] == "Bacteroidota")
    
    get_values <- function(data, taxa) {
        rowSums(otu_table[taxa, sample_data(data)$Subject == subject])
    }
    
    result_table[i, c("Pre_Firmicutes", "Pre_Bacteroidota")] <- get_values(pre_data, firmicutes_taxa)
    result_table[i, c("Post_Firmicutes", "Post_Bacteroidota")] <- get_values(post_data, firmicutes_taxa)
}

print(result_table)

### In progress...

## c. Let's check one of our probiotic formulations, if the subjects who consumed it have elevated levels of the strains the probiotics were meant to elevate

# List the strains for Formulation Red
formulation_red_strains <- c("strainA", "strainB", "strainC")

# Create a general function to generate horizontal bar plots, we can use this function for other probiotic formulation we want to check

# Initialize a list to store the plot objects

# Create and save horizontal bar plots for beneficial and pathogenic species












